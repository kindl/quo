// TODO opaque types like
// extern struct FILE;

extern int puts(UnsafePointer<char> str);
extern UnsafeMutablePointer<FILE> fopen(UnsafePointer<char> filename, UnsafePointer<char> mode);
extern int fgetc(UnsafeMutablePointer<FILE> stream);
extern int fputc(int character, UnsafeMutablePointer<FILE> stream);
extern int fclose(UnsafeMutablePointer<FILE> stream);
extern UnsafeMutablePointer<void> malloc(usize size);

int EOF = -1;

/*
TODO inline
UnsafePointer<T> alloc<T>() {
    return cast<UnsafePointer<T>>(malloc(sizeof<T>()));
}
*/

void copyWithLoop(UnsafeMutablePointer<FILE> srcFileHandle, UnsafeMutablePointer<FILE> destFileHandle)
{
    auto c = fgetc(srcFileHandle);
    while (c != EOF) {
        fputc(c, destFileHandle);
        c = fgetc(srcFileHandle);
    }
}

int main()
{
    auto src = "test.txt";
    auto dest = "test copy.txt";
    
    auto srcFileHandle = fopen(src, "r");
    if (srcFileHandle == nullptr)
    {
        return -1;
    }

    auto destFileHandle = fopen(dest, "w");
    if (destFileHandle == nullptr)
    {
        return -1;
    }

    copyWithLoop(srcFileHandle, destFileHandle);

    fclose(srcFileHandle);
    fclose(destFileHandle);
    
    puts("Done");

    return 0;
}
